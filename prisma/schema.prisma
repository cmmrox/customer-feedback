// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User/Admin model for authentication and system management
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  email         String    @unique
  role          String    @default("ADMIN") // Can be ADMIN or SUPER_ADMIN
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// Staff members who receive feedback
model Staff {
  id            String          @id @default(cuid())
  name          String
  imageUrl      String?
  position      String?
  contactInfo   String?
  status        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feedbackStaff FeedbackStaff[]

  @@map("staff")
}

// Customer feedback entries
model Feedback {
  id                String               @id @default(cuid())
  timestamp         DateTime             @default(now())
  overallRating     String               // "GOOD" or "NOT_SATISFIED"
  comments          String?              @db.Text
  feedbackStaff     FeedbackStaff[]
  feedbackReasons   FeedbackReason[]

  @@map("feedback")
}

// Emotion-based ratings (Heart, Like, Wow, Angry)
// Removed Rating model

// Junction table for feedback to staff ratings
model FeedbackStaff {
  id            String    @id @default(cuid())
  feedbackId    String
  feedback      Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  staffId       String
  staff         Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([feedbackId, staffId])
  @@map("feedback_staff")
}

// Categories for grouping dissatisfaction reasons
model Category {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  description           String?
  dissatisfactionReasons DissatisfactionReason[]

  @@map("categories")
}

// Predefined reasons for customer dissatisfaction
model DissatisfactionReason {
  id            String            @id @default(cuid())
  description   String
  active        Boolean           @default(true)
  categoryId    String
  category      Category          @relation(fields: [categoryId], references: [id])
  feedbackReasons FeedbackReason[]

  @@map("dissatisfaction_reasons")
}

// Junction table for feedback to dissatisfaction reasons
model FeedbackReason {
  id                    String               @id @default(cuid())
  feedbackId            String
  feedback              Feedback             @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  reasonId              String
  reason                DissatisfactionReason @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  createdAt             DateTime             @default(now())

  @@unique([feedbackId, reasonId])
  @@map("feedback_reasons")
}

// System configuration settings
model SystemConfig {
  id            String    @id @default(cuid())
  key           String    @unique
  value         String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("system_config")
}
