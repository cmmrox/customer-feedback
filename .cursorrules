You are a senior TypeScript/Next.js developer with expertise in Prisma, clean code principles, and modern full-stack development.

## **TypeScript Guidelines**

### Basic Principles
- Use English for all code and documentation
- Always declare explicit types for variables and functions
- Avoid using "any" - use "unknown" if type is truly unknown
- Create precise, descriptive types and interfaces
- Use JSDoc to document public classes and methods
- Write self-documenting, intention-revealing code
- Prefer type assertions over type casting when safe

### Naming Conventions
- Use PascalCase for components, classes, types, and interfaces
- Use camelCase for variables, functions, and methods
- Use kebab-case for file and directory names
- Use UPPERCASE for environment variables and constants
- Start function names with verbs (get, set, create, update, delete)
- Use descriptive boolean names: isLoading, hasError, canDelete, shouldRender

## **Next.js Project Structure**

### App Router Structure
- Use App Router in `app/` directory
- Server components by default, add `"use client"` only when needed
- Routes in kebab-case: `app/user-profile/page.tsx`
- Group related routes: `app/(dashboard)/settings/page.tsx`
- Use `layout.tsx` for shared layouts
- Implement `loading.tsx` and `error.tsx` for better UX

### Directory Organization
```

src/
├── app/                 \# App Router pages and layouts
├── components/          \# Reusable UI components
│   ├── ui/             \# Base UI components
│   └── forms/          \# Form-specific components
├── lib/                \# Utility functions and configurations
│   ├── auth.ts         \# Authentication logic
│   ├── db.ts           \# Database connection
│   └── utils.ts        \# Helper functions
├── server/             \# Server-side code
│   ├── api/            \# tRPC routers
│   └── auth.ts         \# Server auth configuration
└── types/              \# TypeScript type definitions

```

## **Component Guidelines**

### React Components
- Use functional components exclusively
- Keep components small and focused (under 100 lines)
- Use TypeScript interfaces for props
- Implement proper error boundaries
- Use React.memo() for expensive components
- Prefer composition over prop drilling

### Component Structure
```

interface ComponentProps {
title: string;
isVisible?: boolean;
onAction: (id: string) => void;
}

export function ComponentName({ title, isVisible = true, onAction }: ComponentProps) {
// Component logic here
return (
<div className="component-container">
{/* JSX here */}
</div>
);
}

```

## **Prisma Best Practices**

### Database Schema
- Use `snake_case` for database table and column names
- Use `camelCase` for Prisma model field names
- Always include `id`, `createdAt`, and `updatedAt` fields
- Use proper relations with appropriate foreign keys
- Include indexes for frequently queried fields

### Database Operations
- Always use the Prisma client from `src/lib/db.ts`
- Never use raw SQL queries unless absolutely necessary
- Use transactions for multiple related operations
- Implement proper error handling for database operations
- Use `include` and `select` to optimize queries

### Schema Example
```

model User {
id        String   @id @default(cuid())
email     String   @unique
name      String?
posts     Post[]
createdAt DateTime @default(now()) @map("created_at")
updatedAt DateTime @updatedAt @map("updated_at")

@@map("users")
}

```

### Database Client Usage
```

import { db } from "@/lib/db";

export async function getUsers() {
try {
return await db.user.findMany({
include: { posts: true },
orderBy: { createdAt: 'desc' }
});
} catch (error) {
console.error('Error fetching users:', error);
throw new Error('Failed to fetch users');
}
}

```

## **API and Server-Side Guidelines**

### API Routes
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Implement consistent error handling
- Use Zod for request validation
- Return consistent response formats
- Add proper CORS headers when needed

### Error Handling
- Create custom error classes
- Use try-catch blocks for async operations
- Log errors with context
- Return user-friendly error messages
- Implement global error boundaries

### Server Actions
```

'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { z } from 'zod'

const createUserSchema = z.object({
name: z.string().min(1),
email: z.string().email(),
})

export async function createUser(formData: FormData) {
const validatedFields = createUserSchema.safeParse({
name: formData.get('name'),
email: formData.get('email'),
})

if (!validatedFields.success) {
return { error: 'Invalid form data' }
}

try {
await db.user.create({
data: validatedFields.data,
})
} catch (error) {
return { error: 'Failed to create user' }
}

revalidatePath('/users')
redirect('/users')
}

```

## **Styling and UI Guidelines**

### Tailwind CSS
- Use Tailwind utility classes
- Implement mobile-first responsive design
- Use consistent spacing scale (4, 8, 12, 16, 24, 32px)
- Leverage Tailwind's color palette
- Use `cn()` utility for conditional classes

### UI Components
- Create reusable base components in `components/ui/`
- Use consistent component APIs
- Implement proper accessibility (ARIA labels, keyboard navigation)
- Support dark mode when applicable

## **Performance and Optimization**

### Next.js Optimizations
- Use Next.js Image component for all images
- Implement proper loading states
- Use Suspense boundaries appropriately
- Optimize bundle size with dynamic imports
- Use server components when possible

### Database Optimizations
- Use connection pooling
- Implement query optimization
- Use database indexes strategically
- Monitor query performance

## **Security Best Practices**

### Authentication & Authorization
- Use secure session management
- Implement CSRF protection
- Validate all user inputs
- Use environment variables for secrets
- Implement rate limiting

### Data Validation
- Validate on both client and server
- Use Zod schemas consistently
- Sanitize user inputs
- Implement proper CORS policies

## **Code Quality Standards**

### General Rules
- Write tests for critical functionality
- Use meaningful commit messages
- Keep functions pure when possible
- Avoid deep nesting (max 3 levels)
- Use early returns to reduce complexity
- Comment complex business logic

### File Organization
- One component per file
- Export components as named exports
- Group related utilities together
- Use absolute imports with `@/` prefix
- Keep imports organized (external → internal → types)

## **Environment and Configuration**

### Environment Variables
```

DATABASE_URL="your_database_url"
NEXTAUTH_SECRET="your_secret"
NEXTAUTH_URL="http://localhost:3000"

```

### Build and Development
- Always run `npm run build` to check for errors
- Use TypeScript strict mode
- Run Prisma migrations with `npx prisma migrate dev`
- Never use `npx prisma db push` in production

IMPORTANT: After making changes, always:
1. Run `npm run build` to verify no build errors
2. Test the functionality works as expected
3. Ensure all TypeScript errors are resolved
```